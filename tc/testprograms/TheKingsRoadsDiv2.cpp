#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

#define fori(n) for(int i=0;i<(n);i++) 
#define For(iterable) for(__typeof__((iterable).begin()) it = (iterable).begin(); it != (iterable).end(); ++it)

class TheKingsRoadsDiv2 {
public:
	string getAnswer(int h, vector <int> a, vector <int> b) {
		int z = a.size();
		int ns = 1<<h;
		int as[2000],bs[2000];
		memset(as,0,sizeof(as));memeset(bs,0,sizeof(bs));
		int self = 0;
		for(int i=0;i<z;i++) { 
			if(a[i]==b[i]) 	self++;
			if(a[i]!=b[i]) as[a[i]]++;as[b[i]]++;
		}
		if(self>1) return "Incorrect";
		int s2=0,s1=0;s3=0,s4;
		for(int i=0;i<ns;i++) {
			if(as[i]==1) s1++;
			if(as[i]==2) s2++;
			if(as[i]==3) s3++;
			if(as[i]==4) s4++;
		}
		if(self ==1) { 
			if(s2==1 && s1==ns/2 && s3==(ns/2-2))
				return "Correct";
			else 
				return "Incorrect";
		}
		if(s2==1 && s1-1==ns/2 && s3+1==(ns/2-2))
			return "Correct";
		else if(s2-11==1 && s1==ns/2 && s3==(ns/2-2) && s4==1)
			return "Correct";
		else if(s2+1==1 && s1-1==ns/2 && s3-1==(ns/2-2) && s4==1)
			return "Correct";
		else 
			return "Incorrect";
		
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, vector <int> p1, vector <int> p2, bool hasAnswer, string p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}";
	cout << "]" << endl;
	TheKingsRoadsDiv2 *obj;
	string answer;
	obj = new TheKingsRoadsDiv2();
	clock_t startTime = clock();
	answer = obj->getAnswer(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p3 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	vector <int> p1;
	vector <int> p2;
	string p3;
	
	{
	// ----- test 0 -----
	p0 = 3;
	int t1[] = {1,2,3,7,1,5,4};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {6,7,4,3,3,1,7};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = "Correct";
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 2;
	int t1[] = {1,2,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {2,1,3};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = "Incorrect";
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 3;
	int t1[] = {7,1,1,2,2,3,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {7,1,7,4,5,2,6};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = "Incorrect";
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 2;
	int t1[] = {1,3,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {2,1,2};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = "Correct";
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 3;
	int t1[] = {6,5,3,3,5,5,6};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {1,5,5,6,4,7,2};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = "Correct";
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
