#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class FoxAndSouvenir {
public:
	vector <int> waysToBuy(int n, int m, vector <int> price, vector <int> xMin, vector <int> xMax, vector <int> yMin, vector <int> yMax, vector <int> require) {
		vector<int> res;
		for(int i=0;i<20000-1;i++) {
			res.push_back(1);
		}
		cout<<(sizeof(int) * res.size()) << endl;
		return res;
		
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, vector <int> p2, vector <int> p3, vector <int> p4, vector <int> p5, vector <int> p6, vector <int> p7, bool hasAnswer, vector <int> p8) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p3.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p3[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p4.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p4[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p5.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p5[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p6.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p6[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p7.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p7[i];
	}
	cout << "}";
	cout << "]" << endl;
	FoxAndSouvenir *obj;
	vector <int> answer;
	obj = new FoxAndSouvenir();
	clock_t startTime = clock();
	answer = obj->waysToBuy(p0, p1, p2, p3, p4, p5, p6, p7);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p8.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << p8[i];
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << answer[i];
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p8.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p8[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	vector <int> p2;
	vector <int> p3;
	vector <int> p4;
	vector <int> p5;
	vector <int> p6;
	vector <int> p7;
	vector <int> p8;
	
	{
	// ----- test 0 -----
	p0 = 1;
	p1 = 5;
	int t2[] = {5,0,5,7,7};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {0};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	int t4[] = {0};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	int t5[] = {0};
			p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
	int t6[] = {4};
			p6.assign(t6, t6 + sizeof(t6) / sizeof(t6[0]));
	int t7[] = {12};
			p7.assign(t7, t7 + sizeof(t7) / sizeof(t7[0]));
	int t8[] = {4};
			p8.assign(t8, t8 + sizeof(t8) / sizeof(t8[0]));
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, p5, p6, p7, true, p8) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 3;
	p1 = 3;
	int t2[] = {1,2,3,4,5,6,7,8,9};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {0,0,0,0,0,0,0,0,0,0};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	int t4[] = {2,2,2,2,2,2,2,2,2,2};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	int t5[] = {0,0,0,0,0,0,0,0,0,0};
			p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
	int t6[] = {2,2,2,2,2,2,2,2,2,2};
			p6.assign(t6, t6 + sizeof(t6) / sizeof(t6[0]));
	int t7[] = {1,2,3,4,5,6,7,8,9,10};
			p7.assign(t7, t7 + sizeof(t7) / sizeof(t7[0]));
	int t8[] = {1,1,2,2,3,4,5,6,8,9};
			p8.assign(t8, t8 + sizeof(t8) / sizeof(t8[0]));
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, p5, p6, p7, true, p8) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 1;
	p1 = 10;
	int t2[] = {1,0,2,1,0,3,1,0,0,1};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {0,0};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	int t4[] = {0,0};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	int t5[] = {2,3};
			p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
	int t6[] = {5,7};
			p6.assign(t6, t6 + sizeof(t6) / sizeof(t6[0]));
	int t7[] = {3,4};
			p7.assign(t7, t7 + sizeof(t7) / sizeof(t7[0]));
	int t8[] = {2,2};
			p8.assign(t8, t8 + sizeof(t8) / sizeof(t8[0]));
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, p5, p6, p7, true, p8) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 5;
	p1 = 5;
	int t2[] = {1,1,0,1,2,1,2,1,1,1,0,1,2,0,2,1,2,0,1,1,1,0,1,1,0};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {0,1,0,2,3};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	int t4[] = {2,1,4,4,3};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	int t5[] = {1,2,0,1,2};
			p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
	int t6[] = {2,4,4,3,4};
			p6.assign(t6, t6 + sizeof(t6) / sizeof(t6[0]));
	int t7[] = {5,2,6,3,1};
			p7.assign(t7, t7 + sizeof(t7) / sizeof(t7[0]));
	int t8[] = {5,3,8928,12,2};
			p8.assign(t8, t8 + sizeof(t8) / sizeof(t8[0]));
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, p5, p6, p7, true, p8) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 1;
	p1 = 40;
	int t2[] = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {0};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	int t4[] = {0};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	int t5[] = {0};
			p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
	int t6[] = {39};
			p6.assign(t6, t6 + sizeof(t6) / sizeof(t6[0]));
	int t7[] = {20};
			p7.assign(t7, t7 + sizeof(t7) / sizeof(t7[0]));
	int t8[] = {846527587};
			p8.assign(t8, t8 + sizeof(t8) / sizeof(t8[0]));
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, p5, p6, p7, true, p8) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 1;
	p1 = 1;
	int t2[] = {0};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {0};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	int t4[] = {0};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	int t5[] = {0};
			p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
	int t6[] = {0};
			p6.assign(t6, t6 + sizeof(t6) / sizeof(t6[0]));
	int t7[] = {0};
			p7.assign(t7, t7 + sizeof(t7) / sizeof(t7[0]));
	int t8[] = {1};
			p8.assign(t8, t8 + sizeof(t8) / sizeof(t8[0]));
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, p4, p5, p6, p7, true, p8) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	p0 = 18;
	p1 = 22;
	int t2[] = {5,7,7,5,6,9,3,7,2,8,7,5,4,7,6,6,8,8,7,12,9,4,4,3,5,7,6,6,15,3,11,8,7,11,6,9,7,5,3,11,10,7,5,3,1,3,2,10,6,10,3,10,6,5,6,4,4,10,5,7,5,5,7,5,7,10,4,4,5,9,5,6,5,10,3,12,6,7,4,5,5,3,3,10,5,3,8,5,2,10,8,6,13,9,6,8,6,7,5,7,7,5,2,1,5,7,6,8,12,4,4,6,4,6,7,4,3,7,2,8,5,5,5,5,8,3,6,3,7,6,9,3,4,3,5,3,7,5,10,4,7,6,8,5,8,4,8,4,6,6,4,9,9,5,7,5,4,10,10,1,9,4,3,10,4,6,9,7,4,8,4,13,4,7,6,5,12,10,3,11,9,5,8,6,8,10,5,8,17,8,6,10,5,2,5,6,7,4,9,7,11,4,7,3,6,4,6,4,6,4,6,5,4,1,6,4,8,4,3,3,0,7,7,11,8,9,8,4,7,7,6,8,4,2,8,7,7,9,3,5,7,5,13,8,8,10,5,10,6,6,10,8,5,5,5,2,5,9,10,4,3,5,4,7,14,5,4,7,7,3,5,8,5,6,6,7,4,7,9,6,7,4,4,10,5,9,8,9,4,7,5,6,9,10,5,9,5,5,8,4,8,3,6,4,5,10,6,5,7,7,7,11,8,7,10,6,9,11,3,8,3,2,6,3,8,9,4,5,6,7,9,7,5,8,8,4,5,5,5,7,8,11,11,6,8,4,3,3,11,6,5,12,6,6,8,7,10,4,5,6,6,7,8,8,7,9,6,8,5,6,3,7,7,2,4,3,1,9,3,7,3,5,4,10,6,7,6,6,8,6,5,8,8,11,8,1};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {11,6,4,6,11,11,2,0,11,2,5,3,5,4,10,0,6,11,7,0,10,4,2,7,13,6,2,9,0,4};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	int t4[] = {13,8,4,17,15,14,13,13,15,3,16,17,13,6,15,11,15,15,9,11,12,8,12,16,16,14,6,10,1,14};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	int t5[] = {8,1,1,17,4,2,0,8,1,7,1,14,11,7,2,15,14,2,1,12,2,14,1,11,10,2,4,8,3,9};
			p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
	int t6[] = {20,17,3,19,17,13,10,10,2,9,10,15,20,12,7,21,17,13,16,15,9,14,11,12,20,14,7,9,3,19};
			p6.assign(t6, t6 + sizeof(t6) / sizeof(t6[0]));
	int t7[] = {55,147,232,244,268,98,102,381,114,251,363,94,31,169,226,24,393,387,8,179,270,283,202,274,264,156,258,54,172,381};
			p7.assign(t7, t7 + sizeof(t7) / sizeof(t7[0]));
	int t8[] = {78093026,387159947,0,0,291584072,626572479,426120834,0,0,0,745892889,22065496,262599170,0,7946,9199037,0,54,142,103980580,0,0,195571841,0,37,502623060,0,0,0,96198211};
			p8.assign(t8, t8 + sizeof(t8) / sizeof(t8[0]));
	all_right = KawigiEdit_RunTest(6, p0, p1, p2, p3, p4, p5, p6, p7, true, p8) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
