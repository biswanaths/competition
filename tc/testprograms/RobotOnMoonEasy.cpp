#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

#define fori(n) for(int i=0;i<(n);i++) 
#define For(iterable) for(__typeof__((iterable).begin()) it = (iterable).begin(); it != (iterable).end(); ++it)

class RobotOnMoonEasy {
public:
	string isSafeCommand(vector <string> b, string s) {
		int r ,c;
		for(int i=0;i<b.size();i++) {
			for(int j=0;j<b[i].size();j++) { 
				if(b[i][j]=='S') {
					r = i, c=j;
					break;
				}
			}
		}
		//cout<<r<<" "<<c<<endl;
		bool alive = true;
		fori(s.size()) {
			if(s[i] =='U' ) { 
				if(r-1<0) { alive = false; break; }
				if(b[r-1][c]=='.') r = r-1;
			} else 
			if(s[i] =='D' ) { 
				if(r+1>=b.size()) { alive = false; break; }
				if(b[r+1][c]=='.') r = r+1;
			} else 
			if(s[i] =='R' ) { 
				if(c+1>=b[0].size()) { alive = false; break; }
				if(b[r][c+1]=='.') c = c+1;
			} else 
			if(s[i] =='L' ) { 
				if(c-1<0) { alive = false; break; }
				if(b[r][c-1]=='.') c = c-1;
			} 
		}
		return (alive?"Alive":"Dead");					
		
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, string p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "\"" << p1 << "\"";
	cout << "]" << endl;
	RobotOnMoonEasy *obj;
	string answer;
	obj = new RobotOnMoonEasy();
	clock_t startTime = clock();
	answer = obj->isSafeCommand(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	string p1;
	string p2;
	
	{
	// ----- test 0 -----
	string t0[] = {".....",".###.","..S#.","...#."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "URURURURUR";
	p2 = "Alive";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {".....",".###.","..S..","...#."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "URURURURUR";
	p2 = "Dead";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {".....",".###.","..S..","...#."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "URURU";
	p2 = "Alive";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"#####","#...#","#.S.#","#...#","#####"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "DRULURLDRULRUDLRULDLRULDRLURLUUUURRRRDDLLDD";
	p2 = "Alive";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"#####","#...#","#.S.#","#...#","#.###"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "DRULURLDRULRUDLRULDLRULDRLURLUUUURRRRDDLLDD";
	p2 = "Dead";
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"S"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "R";
	p2 = "Dead";
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	string t0[] = {"###","#S#","###"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "UUUUUU";
	p2 = "Alive";
	all_right = KawigiEdit_RunTest(6, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
