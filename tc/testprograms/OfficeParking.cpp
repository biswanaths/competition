#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

#define fori(n) for(int i=0;i<(n);i++) 

class OfficeParking {
public:
	int spacesUsed(vector <string> events) {
		int spots=0;int m = -1;
		fori(events.size()) { 
			int space = events[i].find(' ');
			spots += events[i][space+1] == 'a' ? 1: -1;
			m = max(m,spots); 
		}
		
		return m;
		
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	OfficeParking *obj;
	int answer;
	obj = new OfficeParking();
	clock_t startTime = clock();
	answer = obj->spacesUsed(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"Alice arrives","bob arrives","Alice departs","Charles arrives","bob departs","Charles departs"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"AdminBrett arrives","lbackstrom arrives","AdminBrett departs","mike arrives","TheFaxman arrives","AdminBrett arrives","lbackstrom departs","dok arrives","AdminBrett departs","gt arrives","AdminBrett arrives","lbackstrom arrives","AdminBrett departs","jhughes arrives","jhughes departs","TheFaxman departs","MaryJoe arrives","AdminBrett arrives","AdminBrett departs","AdminBrett arrives"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 6;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"SnapDragon arrives","tomek arrives","JohnDethridge arrives","ZorbaTHut arrives","snewman arrives","reid arrives","NGBronson arrives","Yarin arrives","bstanescu arrives","mathijs arrives","radeye arrives","bladerunner arrives","dgarthur arrives","venco arrives","dmwright arrives","WishingBone arrives","Eryx arrives","antimatter arrives","ChristopherH arrives","lars arrives","biggnate arrives","JanKuipers arrives","dary arrives","haha arrives","grotmol arrives","XuChuan arrives","Ryan arrives","LunaticFrindge arrives","Wasteland arrives","RunningWild arrives","hampster arrives","RalphFurmaniak arrives","kyky arrives","qubits arrives","Rustyoldman arrives","turuthok arrives","Vulpecular arrives","Eeyore arrives","wackes arrives","Ishan arrives","dimkadimon arrives","dplass arrives","Olorin arrives","TangentZ arrives","NeverMore arrives","Pops arrives","srowan arrives","tjq arrives","vorthys arrives","schveiguy arrives"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 50;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"AdminBrett arrives","AdminBrett departs","AdminBrett arrives","AdminBrett departs","AdminBrett arrives","AdminBrett departs","AdminBrett arrives","AdminBrett departs","AdminBrett arrives","AdminBrett departs","AdminBrett arrives","AdminBrett departs","AdminBrett arrives","AdminBrett departs","AdminBrett arrives","AdminBrett departs"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"snapdragon arrives","SnapDragon arrives","AdminBrett arrives","AdminBrett departs","SnapDragon departs","snapdragon departs"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"departs arrives","arrives arrives","arrives departs","departs departs"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
